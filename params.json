{"name":"sepa.js","tagline":"Create and validate SEPA XML transactions","body":"Welcome to sepa.js\r\n==================\r\n\r\nThis library can be used to generate the XML structure used\r\nfor [SEPA](http://en.wikipedia.org/wiki/Single_Euro_Payments_Area) payment\r\ntransfers. It is currently in its early stages and mostly geared towards German\r\nbatched direct debit transactions.\r\n\r\nIt will work in the browser or using node.js. To use it in the browser, just\r\ninclude it via script-tag and access through the `SEPA` variable. There are a\r\nfew examples below.\r\n\r\nYou can also try the [live online generator](http://kewisch.github.io/sepa.js/examples/web.html).\r\nIf you are worried about account number safety, be assured that everything is\r\ncalculated client side. Check the source code if you don't trust me.\r\n\r\nIf you have extended sepa.js for a different purpose, please contribute the code\r\neither via email or ideally as a [pull request](https://github.com/kewisch/sepa.js/pulls).\r\nIf you are missing something, please [create an issue](https://github.com/kewisch/sepa.js/issues).\r\n\r\n* Each SEPA document contains exactly one group header, accessible via the `grpHdr` property.\r\n* You can add multiple paymentInfo blocks to a document, i.e one per sequenceType (FRST/RCUR)\r\n* A payment info block can contain multiple transactions.\r\n\r\nValidating an IBAN or Creditor ID\r\n---------------------------------\r\n\r\nYou can use sepa.js to validate IBAN and Creditor ID numbers or calculate their checksum. Here is an example:\r\n\r\n```javascript\r\nvar SEPA = require(\"sepa\");\r\n\r\n// Validating this IBAN returns true.\r\nSEPA.validateIBAN(\"DE40987654329876543210\");\r\n\r\n// Passing this IBAN with \"00\" as the checksum returns the\r\n// IBAN with the correct checksum, \"DE87123456781234567890\".\r\nSEPA.checksumIBAN(\"DE00123456781234567890\");\r\n\r\n// Validating this Creditor ID returns true.\r\nSEPA.validateCreditorID(\"DE98ZZZ09999999999\");\r\n\r\n// Passing this Creditor ID with \"00\" as the checksum returns the\r\n// Creditor ID with the correct checksum, \"DE98ZZZ09999999999\". \r\nSEPA.checksumCreditorID(\"DE00ZZZ09999999999\");\r\n```\r\n\r\nCreating an XML Transfer Document\r\n---------------------------------\r\nThe main use case for sepa.js is creating an XML Document based on the\r\n[EBICS Specification](http://www.ebics.org/index.php?id=30).\r\nHere is a simple node.js example. If you want to use the browser instead, just\r\nomit the first line and include via script-tag or module loader instead.\r\n```javascript\r\nvar SEPA = require(\"sepa\");\r\n\r\nvar doc = new SEPA.Document();\r\ndoc.grpHdr.id = \"XMPL.20140201.TR0\";\r\ndoc.grpHdr.created = new Date();\r\ndoc.grpHdr.initiatorName = \"Example LLC\";\r\n\r\nvar info = new SEPA.PaymentInfo();\r\ninfo.collectionDate = new Date();\r\ninfo.creditorIBAN = \"DE87123456781234567890\";\r\ninfo.creditorBIC = \"XMPLDEM0XXX\";\r\ninfo.creditorName = \"Example LLC\";\r\ninfo.creditorId = \"DE98ZZZ09999999999\";\r\ndoc.addPaymentInfo(info);\r\n\r\nvar tx = new SEPA.Transaction();\r\ntx.debitorName = \"Example Customer\";\r\ntx.debitorIBAN = \"DE40987654329876543210\";\r\ntx.debitorBIC = \"CUSTDEM0XXX\";\r\ntx.mandateId = \"XMPL.CUST487.2014\"\r\ntx.mandateSignatureDate = new Date(\"2014-02-01\");\r\ntx.amount = 50.23;\r\ntx.remittanceInfo = \"INVOICE 54\";\r\ntx.end2endId = \"XMPL.CUST487.INVOICE.54\";\r\ninfo.addTransaction(tx);\r\n\r\nconsole.log(doc.toString());\r\n```\r\n\r\n### XML Result\r\n```xml\r\n<?xml version=\"1.0\"?>\r\n<Document schemaLocation=\"urn:iso:std:iso:20022:tech:xsd:pain.008.003.02 pain.008.003.02.xsd\">\r\n  <CstmrDrctDbtInitn>\r\n    <GrpHdr>\r\n      <MsgId>XMPL.20140201.TR0</MsgId>\r\n      <CreDtTm>2014-01-23T19:16:10.285Z</CreDtTm>\r\n      <NbOfTxs>1</NbOfTxs>\r\n      <CtrlSum>50.23</CtrlSum>\r\n      <InitgPty>\r\n        <Nm>Example LLC</Nm>\r\n      </InitgPty>\r\n    </GrpHdr>\r\n    <PmtInf>\r\n      <PmtInfId>XMPL.20140201.TR0.0</PmtInfId>\r\n      <PmtMtd>DD</PmtMtd>\r\n      <BtchBookg>true</BtchBookg>\r\n      <NbOfTxs>1</NbOfTxs>\r\n      <CtrlSum>50.23</CtrlSum>\r\n      <PmtTpInf>\r\n        <SvcLvl>\r\n          <Cd>SEPA</Cd>\r\n        </SvcLvl>\r\n        <LclInstrm>\r\n          <Cd>CORE</Cd>\r\n        </LclInstrm>\r\n        <SeqTp>FRST</SeqTp>\r\n      </PmtTpInf>\r\n      <ReqdColltnDt>2014-01-23</ReqdColltnDt>\r\n      <Cdtr>\r\n        <Nm>Example LLC</Nm>\r\n      </Cdtr>\r\n      <CdtrAcct>\r\n        <Id>\r\n          <IBAN>DE87123456781234567890</IBAN>\r\n        </Id>\r\n      </CdtrAcct>\r\n      <CdtrAgt>\r\n        <FinInstnId>\r\n          <BIC>XMPLDEM0XXX</BIC>\r\n        </FinInstnId>\r\n      </CdtrAgt>\r\n      <ChrgBr>SLEV</ChrgBr>\r\n      <CdtrSchmeId>\r\n        <Id>\r\n          <PrvtId>\r\n            <Othr>\r\n              <Id>DE98ZZZ09999999999</Id>\r\n              <SchmeNm>\r\n                <Prtry>SEPA</Prtry>\r\n              </SchmeNm>\r\n            </Othr>\r\n          </PrvtId>\r\n        </Id>\r\n      </CdtrSchmeId>\r\n      <DrctDbtTxInf>\r\n        <PmtId>\r\n          <EndToEndId>XMPL.CUST487.INVOICE.54</EndToEndId>\r\n        </PmtId>\r\n        <InstdAmt Ccy=\"EUR\">50.23</InstdAmt>\r\n        <DrctDbtTx>\r\n          <MndtRltdInf>\r\n            <MndtId>XMPL.CUST487.2014</MndtId>\r\n            <DtOfSgntr>2014-02-01</DtOfSgntr>\r\n            <AmdmntInd>false</AmdmntInd>\r\n          </MndtRltdInf>\r\n        </DrctDbtTx>\r\n        <DbtrAgt>\r\n          <FinInstnId>\r\n            <BIC>CUSTDEM0XXX</BIC>\r\n          </FinInstnId>\r\n        </DbtrAgt>\r\n        <Dbtr>\r\n          <Nm>Example Customer</Nm>\r\n        </Dbtr>\r\n        <DbtrAcct>\r\n          <Id>\r\n            <IBAN>DE40987654329876543210</IBAN>\r\n          </Id>\r\n        </DbtrAcct>\r\n        <RmtInf>\r\n          <Ustrd>INVOICE 54</Ustrd>\r\n        </RmtInf>\r\n      </DrctDbtTxInf>\r\n    </PmtInf>\r\n  </CstmrDrctDbtInitn>\r\n</Document>\r\n```\r\n","google":"UA-47442421-1","note":"Don't delete this file! It's used internally to help with page regeneration."}